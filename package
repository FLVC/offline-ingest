#!/usr/bin/env ruby

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -1 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -2 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -3 }

$LOAD_PATH.unshift "#{ENV['HOME']}/WorkProjects/offline-ingest/lib/"

require 'offin/packages'

Utils.ingest_usage if ARGV.empty?

config  = Datyl::Config.new("#{ENV['HOME']}/WorkProjects/offline-ingest/config.yml", "default", "i7d")

# if config.http_proxy
#   ENV['HTTP_PROXY'] = config.http_proxy
#   ENV['http_proxy'] = config.http_proxy
# end

factory = PackageFactory.new(config)

$stdout.sync = true

ARGV.each do |directory|

  begin
    print File.basename(directory) + '.. '

    started = Time.now
    package = factory.new_package(directory)
    package.process

    puts sprintf("%5.2f %s::%s in %s", Time.now - started, package.class, package.name, package.collections.join(', '))
  rescue => e
    STDERR.puts e
    STDERR.puts e.backtrace
    STDERR.puts package.errors if package
  end

end
