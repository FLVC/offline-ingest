#!/usr/bin/env ruby
$LOAD_PATH.unshift '/home/fischer/WorkProjects/offline-ingest/src/rubydora/lib'
$LOAD_PATH.unshift '/home/fischer/WorkProjects/offline-ingest/src/datyl/lib'
$LOAD_PATH.unshift '/home/fischer/WorkProjects/offline-ingest/lib/'

SITE = 'alpo'  # or 'i7d'

require 'rubydora'
require 'offin/document-parsers'
require 'datyl/config'

# extend RI mixins to include itql queries

module Rubydora
  module ResourceIndex
    def itql query
      if CSV.const_defined? :Reader
        FasterCSV.parse(self.risearch(query, :lang => 'itql'), :headers => true)
      else
        CSV.parse(self.risearch(query, :lang => 'itql'), :headers => true)
      end
    end
  end
end



def collection_policy_text namespace
  return <<-XML.gsub(/^     /, '')
     <collection_policy xmlns="http://www.islandora.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="" xsi:schemaLocation="http://www.islandora.ca http://syn.lib.umanitoba.ca/collection_policy.xsd">
       <content_models>
         <content_model name="Islandora Basic Image Content Model" dsid="ISLANDORACM" namespace="#{namespace}" pid="islandora:sp_basic_image"/>
         <content_model name="Islandora Large Image Content Model" dsid="ISLANDORACM" namespace="#{namespace}" pid="islandora:sp_large_image_cmodel"/>
         <content_model name="Islandora PDF Content Model" dsid="ISLANDORACM" namespace="#{namespace}" pid="islandora:sp_pdf"/>
         <content_model name="Islandora Collection Content Model" dsid="ISLANDORACM" namespace="#{namespace}" pid="islandora:collectionCModel"/>
       </content_models>
       <search_terms/>
       <staging_area/>
       <relationship>isMemberOfCollection</relationship>
     </collection_policy>
   XML
end

def create_new_object repo, namespace
  sax_document = SaxDocumentGetNextPID.new
  Nokogiri::XML::SAX::Parser.new(sax_document).parse(repo.next_pid(:namespace => namespace))
  pid = sax_document.pids.shift
  STDERR.puts "created PID #{pid}"
  return repo.create(pid)
end


def dc_text pid, title
  return <<-EOF.gsub(/^    /, '')
    <oai_dc:dc xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
      <dc:title>#{title}</dc:title>
      <dc:identifier>#{pid}</dc:identifier>
    </oai_dc:dc>
  EOF
end


# # NEEDed:

# # a collection name from manifest
# # user will default to fedoraAdmin here?

def list_collections repo
  query = "select $object $title from <#ri> where ($object <fedora-model:label> $title and $object <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>)"
  return repo.itql(query).map{ |row| row[0] }
end


# DO NOT use prefix 'info:fedora/', we'll add it ourselves

def create_new_collection config, repo, collection_name

  raise "Bad collection name #{collection_name}" if     collection_name =~ /info:fedora/
  raise "Bad collection name #{collection_name}" unless collection_name =~ /:/

  fedora_pid = 'info:fedora/' + collection_name

  return if list_collections(repo).include? fedora_pid

  object = repo.create(fedora_pid)
  label = 'Digitool Generated Collection ' + collection_name

  object.memberOfCollection << config.root_collection
  object.models << 'info:fedora/islandora:collectionCModel'
  object.label = label

  ds = object.datastreams['TN']
  ds.dsLabel  = "Thumbnail"
  ds.content  = File.read(config.default_folder_filename)
  ds.mimeType = 'image/png'

  # TODO: check that we're getting versionable correct

  ds = object.datastreams['COLLECTION_POLICY']
  ds.dsLabel      = "Collection Policy"
  ds.content      = collection_policy_text(config.namespace)
  ds.mimeType     = 'text/xml'
  ds.controlGroup = 'X'

  # Doesn't work.  How to get the label into the DC stream,  then?
  #
  #  ds = object.datastreams['DC']
  #  ds.content      = dc_text(collection_name, label)
  #  ds.dsLabel      = 'Dublin Core record for this object'
  #  ds.mimeType     = 'text/xml'
  #  ds.controlGroup = 'X'


  puts dc_text(collection_name, label)

  object.save

  puts "Created #{fedora_pid} collection"
end

config = Datyl::Config.new('/home/fischer/WorkProjects/offline-ingest/config.yml', 'default', SITE)
repo   = Rubydora.connect :url => config.url, :user => config.user, :password => config.password

create_new_collection config, repo, 'lucky:13'
create_new_collection config, repo, 'fischer:14'
create_new_collection config, repo, 'fischer:15'
