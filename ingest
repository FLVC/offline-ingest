#!/usr/bin/env ruby

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit }

$LOAD_PATH.unshift "#{ENV['HOME']}/WorkProjects/offline-ingest/lib/"

require 'offin/ingestor'
require 'datyl/config'
require 'offin/utils'
require 'offin/manifest'
require 'offin/mods'

# Errors to field - processing means the program terminates; package
# means the package processing terminates and we continue with the
# next package.  When we catch something unspecified, it's a package exception
#
# Errno::ECONNREFUSED Connection Refused - processing exception

t1 = Time.now

package_directory = ARGV[0]

Utils.ingest_usage if package_directory.nil?
Utils.ingest_usage unless File.exists? package_directory and File.directory? package_directory

package_listing = Utils.package_directory_as_expected? package_directory

unless  package_listing.errors.empty?
  STDERR.puts "Bad Package", package_listing.errors
  exit
end

config = Datyl::Config.new("#{ENV['HOME']}/WorkProjects/offline-ingest/config.yml", 'default', 'i7d')

manifest = Manifest.new(package_listing.manifest)

unless  manifest.errors.empty?
  STDERR.puts "Bad Manifest", manifest.errors
  exit
end

mods = Mods.new(config, package_listing.mods)

unless mods.errors.empty?
  STDERR.puts "Bad MODS", mods.errors
  exit
end

collection = Collection.new(config, 'offline:borrowed', 'Something Borrowed')

ingestor   = Ingestor.new(config)

ingestor.add_mods(package_listing.mods)           # filename
ingestor.add_dc(mods.to_dc.to_s)                  # string
ingestor.add_basic_image(package_listing.image)   # filename
ingestor.add_label(package_listing.name)

ingestor.ingest(collection)

t2 = Time.now

puts "Ingested #{package_listing.name} in #{t2 - t1} seconds."
