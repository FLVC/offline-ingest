#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), './lib/'))
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../lib/'))

require 'resource-index'
require 'fedora-config'

Kernel.trap('INT')  { STDERR.puts "Interrupt"  ; exit }
Kernel.trap('HUP')  { STDERR.puts "Hangup"  ; exit }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit }

CONFIG_FILE = "/home/fischer/WorkProjects/offline-ingest/include/config.yml"

ri = ResourceIndex.new Fedora::Config.new(CONFIG_FILE)

# example queries:

# query to find all members of a collection class,

str1 =
  "select  $object $title $content from <#ri>
    where ($object <fedora-model:label> $title
      and  $object <fedora-model:hasModel> $content
      and ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/islandora:sp_basic_image_collection>
       or  $object <fedora-rels-ext:isMemberOf> <info:fedora/islandora:sp_basic_image_collection>)
      and  $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
    minus  $content <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
 order by  $title"

# get all relationships

str2 =
   "select $a $r $b from <#ri>
    where  $a <fedora-model:hasModel> <info:fedora/fedora-system:FedoraObject-3.0>
    and    $a $r $b
    and    $b <fedora-model:hasModel> <info:fedora/fedora-system:FedoraObject-3.0>"

# show titles of all basic images:

str3 =
  "select $object $title from <#ri>
    where  (
            $object   <info:fedora/fedora-system:def/relations-external#isMemberOf>   <info:fedora/islandora:sp_basic_image_collection>
              or
            $object   <info:fedora/fedora-system:def/relations-external#isMemberOfCollection>   <info:fedora/islandora:sp_basic_image_collection>
            )
            and
       $object <dc:title> $title"


str4 =
  "select $object $title from <#ri>
    where ($object <fedora-model:label> $title
      and  $object <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>)"

collections = ri.collections

collections.keys.sort{ |a,b| a.downcase <=> b.downcase }.each do |k|
  puts "#{k} => #{collections[k]}"
end

exit

puts "Searched via " + ri.url

puts ri.itql(str1)

puts ri.collections
