#!/usr/bin/env ruby

# TODO: expire the errors/ and warnings/ directories in here.
#
# This script starts a worker process for ingesting a package listed
# on a resque queue name :ingest.  Multiple workers are created by
# invoking this script multiple times.  Normally we'll have a
# process-monitor such as god manage that startup.  See /etc/god.conf.

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../lib'))

ENV['PATH'] = '/usr/local/bin:' + ENV['PATH']  # needed to ensure convert will run '/usr/local/bin/gs instead of system-installed one'

# our ghostscript doesn't respect TMPDIR, tries to write temporary files to the CWD, which is often '/'

QTEMP='/qdata/tmp/'
Dir.chdir File.exists?(QTEMP) ? QTEMP : '/tmp/'

require 'rubygems'
require 'offin/config'
require 'offin/exceptions'
require 'resque'
require 'resque-round-robin'
require 'watch-queue/watch-utils'
require 'watch-queue/constants'

# A process monitor (currently 'god') will restart an instance of this script if we exit on error.

queues = ARGV

begin
  config = WatchUtils.setup_config()

  WatchUtils.setup_environment(config)
  WatchUtils.setup_resque_logger()
  WatchUtils.setup_redis_connection(config)
  WatchUtils.start_ingest_worker(WatchConstants::WORKER_SLEEP, *queues)
  Resque.logger.info "Process #{$$} Exiting...."

rescue Redis::CannotConnectError, PackageError, SystemError => e
  Resque.logger.error "System error: #{e.class}: #{e.message}; will restart after #{WatchConstants::SYSTEM_ERROR_SLEEP/60.0} minutes."
  sleep WatchConstants::SYSTEM_ERROR_SLEEP

rescue => e
  Resque.logger.error "Unhandled error: #{e.class}: #{e.message}; will restart after #{WatchConstants::UNHANDLED_ERROR_SLEEP/60.0} minutes.  Backtrace follows:"
  e.backtrace.each { |line| Resque.logger.error line }
  sleep WatchConstants::UNHANDLED_ERROR_SLEEP

end
