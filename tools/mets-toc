#!/usr/bin/env ruby

require 'rubygems'

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -1 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -2 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -3 }

require 'socket'

case Socket.gethostname

when /alpo/
  $LOAD_PATH.unshift "/home/fischer/WorkProjects/offline-ingest/lib/"
  config_filename  = "/home/fischer/WorkProjects/offline-ingest/config.yml"
  server = 'alpo'

  ENV['HTTP_PROXY'] = 'http://localhost:3128/'  # libxml picks this up, but it's very picky about syntax!
  ENV['http_proxy'] = 'http://localhost:3128/'

when /romeo-foxtrot/
  $LOAD_PATH.unshift "/Home/fischer/WorkProjects/offline-ingest/lib/"
  config_filename  = "/Home/fischer/WorkProjects/offline-ingest/config.yml"
  server = 'alpo'

when /islandorad/
  $LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"
  config_filename  = "/usr/local/islandora/offline-ingest/config.yml"
  server = 'i7d'

  ENV['HTTP_PROXY'] = 'http://localhost:3128/'  # libxml picks this up, but it's very picky about syntax!
  ENV['http_proxy'] = 'http://localhost:3128/'
else
  STDERR.puts "#{$0} Doesn't know how to configure for this environment, quitting."
  exit -1
end

require 'offin/mets'
require 'datyl/config'

config  = Datyl::Config.new(config_filename, "default", server)

SaxDocumentExamineMets.debug = false


ARGV.each do |filename|

  STDERR.puts filename
  start = Time.now

  mets = Mets.new(config, filename)

  STDERR.puts mets.valid? ? "METS is valid" : "METS is invalid"
  STDERR.puts 'METS Errors: ',   mets.errors   if mets.errors?
  STDERR.puts 'METS Warnings: ', mets.warnings if mets.warnings?

  next unless mets.valid?

  # mets.structmap.print

  toc  = TableOfContents.new(mets.structmap)

  STDERR.puts toc.valid? ? "TOC is valid" : "TOC is invalid"
  STDERR.puts 'TOC Errors: ',   toc.errors   if toc.errors?
  STDERR.puts 'TOC Warnings: ', toc.warnings if toc.warnings?

  next unless toc.valid?

  STDERR.puts sprintf("Successfully parsed #{toc.pages.length} pages in %5.2f seconds.", Time.now - start)

  puts toc.to_json(mets.label)

  # toc.print
end
