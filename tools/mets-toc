#!/usr/bin/env ruby

require 'rubygems'

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -1 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -2 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -3 }


$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), "../lib"))

require 'socket'
require 'offin/mets'
require 'offin/config'

config  = Datyl::Config.new(ENV['CONFIG'] || "/usr/local/islandora/offline-ingest/config.yml", "default")

SaxDocumentExamineMets.debug = false

ARGV.each do |filename|

  STDERR.puts filename
  start = Time.now

  mets = Mets.new(config, filename)

  STDERR.puts mets.valid? ? "METS is valid" : "METS is invalid"
  STDERR.puts 'METS Errors: ',   mets.errors   if mets.errors?
  STDERR.puts 'METS Warnings: ', mets.warnings if mets.warnings?

  next unless mets.valid?

  # all of the candidate structmaps

  structmaps = mets.sax_document.structmaps

  # count = 1
  # structmaps.each do |sm|
  #   puts "StructMap Number #{count}"
  #   sm.each do |elt|
  #     line = '. ' * elt.level
  #     case
  #     when elt.is_page
  #       line += '. ' + '"' + elt.title + '"'
  #       elt.files.each { |file| line = "#{line} [#{file.sequence}] -- #{file.href}  "  }
  #     else # is a section heading
  #       line += '* ' + '"' +  elt.title + '"'
  #     end
  #     puts line
  #   end
  #   puts ""
  #   count += 1
  # end
  # puts ""

  # mets.structmap.print

  toc  = TableOfContents.new(mets.structmap)

  STDERR.puts toc.valid? ? "TOC is valid" : "TOC is invalid"
  STDERR.puts 'TOC Errors: ',   toc.errors   if toc.errors?
  STDERR.puts 'TOC Warnings: ', toc.warnings if toc.warnings?

  next unless toc.valid?

  STDERR.puts sprintf("Successfully parsed #{toc.pages.length} pages in %5.2f seconds.", Time.now - start)

  puts toc.to_json(mets.label)

  # toc.print
end
