#!/usr/bin/env ruby

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -3 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }

# $LOAD_PATH.unshift "#{ENV['HOME']}/WorkProjects/offline-ingest/lib/"
$LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"

require 'offin'
require 'optparse'

# @config  = Datyl::Config.new("#{ENV['HOME']}/WorkProjects/offline-ingest/config.yml", "default", "alpo")
@config  = Datyl::Config.new("/usr/local/islandora/offline-ingest/config.yml", "default", "alpo")

Struct.new('MockManifest', :owning_institution, :submitting_institution, :object_history)

manifest = Struct::MockManifest.new
manifest.owning_institution = 'UF'
manifest.object_history = [ { "data" => "admin_unit=\"NCF01\", ingest_id=\"ing12813\", creator=\"creator:SNORRIS\", creation_date=\"2012-05-16 13:57:11\", modified_by=\"creator:SNORRIS\", modification_date=\"2012-05-16 13:58:09\"", "source" => "digitool"} ]
ARGV.each do |filename|

  @mods = Mods.new(@config, filename)

  STDERR.puts "Extensions? #{@mods.flvc_extensions?}"

  @mods.add_islandora_identifier('foo:bar')
  @mods.add_flvc_extension_elements(manifest)

  STDERR.puts "Extensions? #{@mods.flvc_extensions?}"

  STDERR.puts "MODS file #{filename} is #{@mods.valid? ? 'valid' : 'not valid'}."
  if @mods.errors?
    STDERR.puts 'Errors:'
    STDERR.puts @mods.errors.map { |foo| '   ' + foo }
    next
  end
  if @mods.warnings?
    STDERR.puts 'Warnings:'
    STDERR.puts @mods.warnings.map { |foo| '   ' + foo }
  end

  STDERR.puts "PURLS: " + @mods.purls.join('   ')
  STDERR.puts "IIDS: "  + @mods.iids.join('   ')
  STDERR.puts "DIGITOOL IDS: "  + @mods.digitool_ids.join('   ')
  puts @mods.to_s
end
