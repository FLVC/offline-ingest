#!/usr/bin/env ruby

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -3 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }

$LOAD_PATH.unshift "#{ENV['HOME']}/WorkProjects/offline-ingest/lib/"

require 'offin/packages'
require 'optparse'

def parse_command args
  server_code = []
  opts   = OptionParser.new do |opt|
    opt.banner = "Usage: packages --flag package-directory < more package-directories >\n" + "where --flag is one of:\n"
    opt.on("--fsu7t",    "use fsu7t.flca.edu for ingest")          { server_code.push 'fsu7t' }
    opt.on("--fsu-prod", "use fsu-prod.flca.edu for ingest")       { server_code.push 'fsu-prod' }
    opt.on("--d7",       "use islandora7d.fcla.edu for ingest")    { server_code.push 'i7d' }
    opt.on("--alpo",     "use alasnorid.alpo.fcla.edu for ingest") { server_code.push 'alpo' }
  end
  opts.parse!(args)
  raise "No server specified."        if server_code.empty?
  raise "Too many servers specified." if server_code.length > 1
  raise "No packages specified."      if args.empty?
rescue => e
  STDERR.puts e, opts
  exit -1
else
  return server_code.pop
end

indent  = ' ' * 4
config  = Datyl::Config.new("#{ENV['HOME']}/WorkProjects/offline-ingest/config.yml", "default", parse_command(ARGV))

# if config.http_proxy
#   ENV['HTTP_PROXY'] = config.http_proxy
#   ENV['http_proxy'] = config.http_proxy
# end

factory = PackageFactory.new(config)

$stdout.sync = true

ARGV.each do |directory|
  begin
    started = Time.now
    package = factory.new_package(directory)

    raise PackageError, "Invalid package in #{directory}." unless package.valid?

    package.updater = DigitoolMetadataUpdater
    package.ingest
    puts sprintf("%5.2f sec, %5.2f MB  %s::%s => %s (%s)", Time.now - started, package.bytes_ingested/1048576.0, package.class, package.name, package.collections.join(', '), package.label)

  rescue PackageError => e
    STDERR.puts e
  rescue => e
    STDERR.puts "Caught #{e.class} - #{e.message}", e.backtrace
  ensure
    STDERR.puts 'Errors:',   package.errors.map   { |line|  indent + line }, '' if package and package.errors?
    STDERR.puts 'Warnings:', package.warnings.map { |line|  indent + line }, '' if package and package.warnings?
  end

end
