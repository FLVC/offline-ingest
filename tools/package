#!/usr/bin/env ruby

# TODO: package factory will not create a package object if there is a
# missing manifest; thus it doesn't get reported as others do.  There
# is a partial work around below using the hacky @package_error, but
# this still doesn't get logged to the db.  Perhaps we should make the
# package factory return a generic bad package with an error array
# populated.

# TODO: need to do a sanity check on all the config variables - make
# sure files are there, directories are writable, etc.

require 'rubygems'
require 'socket'

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }
Kernel.trap('HUP')  { "IGNORE" }

STDERR.sync = true
STDOUT.sync = true

INDENT = ' ' * 4

$LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"

require 'offin/ingest-support'

config = package_ingest_parse_command_line ARGV

if config.proxy
  ENV['http_proxy'] = config.proxy
  ENV['HTTP_PROXY'] = config.proxy
end

setup_ingest_database(config)

if config.digitool_rules
  factory = PackageFactory.new(config, DigitoolMetadataChecker)
else
  factory = PackageFactory.new(config, ProspectiveMetadataChecker)
end


list = ARGV.sort

puts "Processing #{list.count} package#{list.count == 1 ? '' : 's'}:\n" + list.join("\n")

list.each do |directory|
  begin
    @package_error = false

    completed, started, finished  = false, Time.now, Time.now

    package = factory.new_package(directory)

    raise PackageError, "Invalid package in #{directory}." unless package.valid?

    package.ingest

    completed, finished = true, Time.now

  rescue PackageError => e
    @package_error = true     # this boolean is mostly to handle the case of errors from package initialization, like a missing manifest, that don't produce a package object at all.
    puts e

  rescue SystemError => e
    STDERR.puts "Gracefully exiting from fatal system error: #{e.message}"
    exit 1

  rescue => e
    STDERR.puts "Caught completely unexpected error #{e.class} - #{e.message}", e.backtrace, '', "Please correct the error and retry."
    exit 1

  ensure

    if package

      puts sprintf('%5.2f sec, %5.2f MB  %s::%s (%s) => %s, "%s"',
                   finished - started,
                   package.bytes_ingested/1048576.0,
                   package.class,
                   package.name,
                   package.pid || 'no pid',
                   package.collections.empty? ?  'no collections' : 'collection: ' + package.collections.join(', '),
                   package.label)

      package.delete_from_islandora if not package.valid?

      puts INDENT + 'Errors:',   package.errors.map   { |line|  INDENT + line }, '' if package.errors?

      puts INDENT + 'Warnings:', package.warnings.map { |line|  INDENT + line }, '' if package.warnings?

      record_to_database(config.site, package, completed && package.valid?, started, finished) unless config.test_mode
    end

    move_to_dump_directory_maybe(directory, config.dump_directory) if (package and not package.valid?) or (not package and @package_error)
  end
end
