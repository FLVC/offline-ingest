#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), "../lib"))

ENV['PATH'] = '/usr/local/bin:' + ENV['PATH']  # needed to ensure convert will run '/usr/local/bin/gs instead of system-installed one'

require 'rubygems'
require 'offin/packages'
require 'offin/db'
require 'offin/config'
require 'watch-queue/watch-utils'
require 'watch-queue/watch-directory'
require 'watch-queue/constants'

# This program watches one or more directories, and when packages are
# fully copied to it, will transfer them to a processing directory and
# enter them into a redis queue; the program 'ingest-handler' will
# manage process ingests.

## TODO: use a logger pointing to STDERR instead of just writing to it
## (so we can assign/ignore severity levels) (so we can get a decent
## PID in the logs too)

# Note: incoming-package-handler is run as an independent front end
# for our queueing system, so it isn't directly running resque worker
# code, as is the ingest-handler; thus it won't respond in the
# expected way to standard resque process signaling.
#
# It *is* started and watched by the 'god' process manager (as is
# ingest-handler) however.
#
# All this is to say that our logging must be different from
# ingest-handler (which uses Resque::Logger). For now, we simply write
# to STDERR, which gets captured by the process manager and logged.


def loop_for_incoming(config_file)

  STDERR.puts "INFO: reading configuration file #{config_file}"
  watched_directories = watch_configured_directories(config_file)
  watched_directories.each { |wd| wd.enqueue_incoming_packages }

  initial_mtime = File.stat(config_file).mtime
  while true
    sleep WatchConstants::DIRECTORY_SCAN_PAUSE
    current_mtime = File.stat(config_file).mtime
    if current_mtime > initial_mtime
      initial_mtime = current_mtime
      STDERR.puts "INFO: configuration file #{config_file} was updated, re-reading"
      watched_directories = watch_configured_directories(config_file)
    end
    watched_directories.each { |wd| wd.enqueue_incoming_packages }
  end
end

# Search through various website stanzas in the config file for
# declaration of ftp_queue; do sanity check and collect up all configs
# that refer to a valid ftp_site.  Also check for system digitool
# directory.  We re-read the configuation file every time we're
# called, to catch changes.

def watch_configured_directories  config_file

  watched_directories = []

  config = Datyl::Config.new(config_file, 'default')

  config.all_sections.each do |section|

    site_config = Datyl::Config.new(config_file, 'default', section)
    next unless site_config.site   # only use sections concerning websites

    # TODO: DRY up the next two sections (ftp_queue/digitool_queue)

    if site_config.ftp_queue
      errors = WatchUtils.directory_problems(site_config.ftp_queue)
      if errors.empty?
        STDERR.puts "INFO: Watching FTP incoming directory in #{site_config.ftp_queue} for #{section}"
        watched_directories.push FtpWatchDirectory.new(site_config, section)
      else
        STDERR.puts "ERROR: Skipping watching FTP directory #{site_config.ftp_queue} for #{section}, these configuration errors were encountered:"
        errors.each { |line| STDERR.puts "ERROR: " + line }
      end
    end

    if site_config.digitool_queue
      errors = WatchUtils.directory_problems(site_config.digitool_queue)
      if errors.empty?
        STDERR.puts "INFO: Watching DIGITOOL incoming directory in #{site_config.digitool_queue} for #{section}"
        watched_directories.push DigitoolWatchDirectory.new(site_config, section)
      else
        STDERR.puts "ERROR: Skipping watching DIGITOOL directory #{site_config.digitool_queue} for #{section}, these configuration errors were encountered:"
        errors.each { |line| STDERR.puts "ERROR: " + line }
      end
    end
  end

  return watched_directories.compact
end

# The 'god' process monitor will restart an instance of this script
# when we exit on error.

begin

  config = WatchUtils.setup_config()
  WatchUtils.setup_redis_connection(config)
  WatchUtils.setup_ingest_database(config)
  loop_for_incoming(config.path)

rescue Redis::CannotConnectError, SystemError => e

  STDERR.puts "ERROR: #{e.message}; sleeping for #{WatchConstants::SYSTEM_ERROR_SLEEP} seconds."
  sleep WatchConstants::SYSTEM_ERROR_SLEEP
  exit

rescue => e

  STDERR.puts "ERROR: Unhandled #{e.class}: #{e.message}; sleeping for #{WatchConstants::UNHANDLED_ERROR_SLEEP/60} minutes.  Backtrace follows:"
  e.backtrace.each { |line| STDERR.puts "ERROR: " + line }
  sleep WatchConstants::UNHANDLED_ERROR_SLEEP
  exit
end
