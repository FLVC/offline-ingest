#!/usr/bin/env ruby

$LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"

require 'rubygems'
require 'fileutils'
require 'find'
require 'offin/config'
require 'offin/ingest-support'
require 'optparse'
require 'socket'

# A program to move packages into the appropriate /digitool/ processing
# filesystem, changing the permissions as appropriate.  The ingest
# queing system takes it from there.

TARGET_GROUP   = 'dldev'


#### TODO: expand for 'well-known' queues... ftp, digitool, prospective, sobek (?)
#### TODO: needs to be a better way to account for all the queues in one place...

def available_servers
  available = {}
  get_config_server_sections.each do |server_section|  # these will be server aliases
    root = get_config(server_section).digitool_queue
    next unless root
    if File.exists?(root) && File.directory?(root)
      available[server_section] = root
    else
      STDERR.puts "The config.yml file lists a digitool_queue of #{root} for #{server_section}, but that directory doesn't exist"
    end
  end
  return available
end



Struct.new('QueueOptions', :server, :directory, :quiet)

def parse_command_line(args)
  config = Struct::QueueOptions.new()
  servers = available_servers
  raise "There are no configured servers for digitool queues - use config.yml for adding digitool_queue: entries"  if servers.empty?
  opts = OptionParser.new do |opt|
    opt.banner = "Usage: queue-packages [options] package [other packages]"
    opt.on("--server ID",  String,  "Required, a server to use; (use digitool_queue in config.yml file to add more): #{servers.keys.sort.join(', ')}.") do |server|
      config.server = server
      config.directory = servers[server]
    end
    opt.on("--quiet",  "Optional, don't report the count or destination directory when finished") do |quiet|
      config.quiet = true
    end
  end
  opts.parse! args
  raise "You must select a valid server."  unless config.server && config.directory
  raise "You must include one of more arguments listing package directories"  unless args.length > 0
rescue => e
  STDERR.puts e, opts
  exit -1
else
  return config
end

# Do we have membership in the given group?

def in_target_group?(group_name)
  Process.groups.map  { |gid|  Etc.getgrgid(gid).name }.include? group_name
rescue
  false
end

# Basic sanity checks for filesystems

def package_ok?(destination, package)
  unless File.exists? package
    STDERR.puts "Package '#{package}' doesn't exist, skipping."
    return false
  end

  if File.exists? File.join(destination, package)
    STDERR.puts "Package '#{package}' already exists in '#{destination}', skipping."
    return false
  end

  Find.find(package) do |path|
    unless File.readable? path
      STDERR.puts "Package file '#{path}' is not readable, skipping."
      return false
    end
  end

  return true
rescue => e
  STDERR.puts e.message
  return false
end


def copy_package(group, target_directory, package)
  package_copy = File.join(target_directory, File.basename(package))

  FileUtils.cp_r(package, target_directory)
  FileUtils.chown_R(nil, group, package_copy)

  dirs  = []
  files = []
  Find.find(package_copy) do |path|
    if FileTest.directory?(path)
      dirs.push path
    else
      files.push path
    end
  end

  FileUtils.chmod(02775, dirs)
  FileUtils.chmod(00664, files)
  return true
rescue => e
  STDERR.puts "Error copying package '#{package}' to '#{target_directory}': #{e}"
  STDERR.puts e.backtrace

  FileUtils.rm_rf package_copy
  return false
end


def copy_packages(group, target_directory, packages)
  count = 0
  packages.each do |package|
    next unless package_ok?(target_directory, package)
    count += 1 if copy_package(group, target_directory, package)
  end
  return count
end



def main()
  config = parse_command_line(ARGV)

  unless in_target_group? TARGET_GROUP
    STDERR.puts "You must be in the #{TARGET_GROUP} group to run this program."
    exit
  end

  destination_directory = File.join(config.directory, 'incoming')
  count = copy_packages(TARGET_GROUP, destination_directory, ARGV)

  STDERR.puts "#{count} package#{count == 1 ? '' : 's'} copied to #{destination_directory}"  unless config.quiet
end



main()
