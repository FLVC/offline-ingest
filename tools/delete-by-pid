#!/usr/bin/env ruby

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -3 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }

require 'rubygems'
require 'socket'
require 'optparse'

$LOAD_PATH.unshift case Socket.gethostname
                   when /alpo/i;                                "/home/fischer/WorkProjects/offline-ingest/lib/"
                   when /romeo-foxtrot|flvc-rfischer.local/i;   "/Users/fischer/WorkProjects/offline-ingest/lib/"
                   when /islandora[dtp]\.fcla\.edu|tlhlxftp01-.*\.flvc\.org/i;      "/usr/local/islandora/offline-ingest/lib"
                   else
                     STDERR.puts "#{$0} Doesn't know how to configure for this environment (#{Socket.gethostname.downcase}), quitting."
                     exit -1
                   end

require 'offin/ingest-support'
require 'rubydora'

include Rubydora


def parse_command_line args
  server_id = nil
  server_sections = get_config_server_sections

  opts   = OptionParser.new do |opt|
    opt.banner = "Usage: delete-by-pid --server ID pid pid..."
    opt.on("--server ID",   String,  "delete from server by id of #{server_sections.join(', ')}.")  { |sid| server_id = sid }
  end

  opts.parse!(args)

  raise "No server ID supplied." unless server_id
  raise "Invalid server ID; use one of #{server_sections.join(', ')}" unless server_sections.include? server_id
  raise "No pids specified." if args.empty?

  config = Datyl::Config.new(get_config_filename, "default", server_id)

rescue => e
  STDERR.puts e, opts
  exit -1
else
  return config
end


config = parse_command_line(ARGV)
repository = Rubydora.connect :url => config.fedora_url, :user => config.user, :password => config.password

ARGV.each do |pid|
  begin
    pid = "info:fedora/#{pid}" unless pid =~ /^info:fedora/
    DigitalObject.find_or_initialize(pid, repository).delete
  rescue => e
    STDERR.puts "Couldn't delete #{pid}, #{e.class}: #{e.message}"
  end
end
