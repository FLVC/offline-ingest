#!/usr/bin/env ruby

require 'rubygems'

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -3 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }

require 'socket'

case Socket.gethostname

when /alpo/i
  $LOAD_PATH.unshift "/home/fischer/WorkProjects/offline-ingest/lib/"
  config_filename  = "/home/fischer/WorkProjects/offline-ingest/config.yml"

when /romeo-foxtrot/i, /FLVC-rfischer/i
  $LOAD_PATH.unshift "/Users/fischer/WorkProjects/offline-ingest/lib/"
  config_filename  = "/Users/fischer/WorkProjects/offline-ingest/config.yml"

when /islandorad/i, /islandorat/i, /islandorap/i
  $LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"
  config_filename  = "/usr/local/islandora/offline-ingest/config.yml"

else
  STDERR.puts "#{$0} Doesn't know how to configure for this environment, quitting."
  exit -1
end

require 'offin/config'
require 'offin/packages'
require 'offin/db'

config  = Datyl::Config.new(config_filename, "default")

DataBase.create config
DataBase.setup  config


site = DataBase::IslandoraSite.first_or_create(:hostname => 'fsu7t.fcla.edu')

rec = DataBase::IslandoraPackage.new(
                                     :title => "Field flowers: a small bunch of the most fragrant of blossoms gathered from the broad acres of Eugene Field's farm of love",
                                     :package_name   => 'FSDT188782',
                                     :islandora_pid  => 'fsu:1219',
                                     :time_started   => Time.now.to_i - 1,
                                     :time_finished  => Time.now.to_i + 1,
                                     :bytes_ingested => 2 ** 48 -1,
                                     :islandora_site => site,
                                  )

rec.add_warnings    'bad user'
rec.add_purls       'http://purl.flvc.org/dt/123', 'http://purl.flvc.org/dt/456'
rec.add_collections 'info:fedora/digitool:offline'


# puts 'Warnings: ' + rec.get_warnings.join(', ')
# puts 'Errors: ' + rec.get_errors.join(', ')
# puts 'Purls: ' + rec.get_purls.join(', ')
# puts 'Collections: ' + rec.get_collections.join(', ')

puts rec.errors.map { |e| e.to_s } unless rec.save

DataBase.dump
