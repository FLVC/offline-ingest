#!/usr/bin/env ruby

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -2 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -3 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -4 }

require 'socket'

case Socket.gethostname
when /alpo/
  $LOAD_PATH.unshift "/home/fischer/WorkProjects/offline-ingest/lib/"
  config_filename  = "/home/fischer/WorkProjects/offline-ingest/config.yml"
when /romeo-foxtrot/
  $LOAD_PATH.unshift "/Users/fischer/WorkProjects/offline-ingest/lib/"
  config_filename  = "/Users/fischer/WorkProjects/offline-ingest/config.yml"
when /islandora/
  $LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"
  config_filename  = "/usr/local/islandora/offline-ingest/config.yml"
else
  STDERR.puts "Don't know how to find the configuration file for this environment, quitting."
  exit -1
end

require 'offin/mets'
require 'offin/document-parsers'
require 'datyl/config'


def parse_digitial_entity filepath
  sax_document = DigitoolStreamRef.new
  Nokogiri::XML::SAX::Parser.new(sax_document).parse(File.open(filepath))
  return sax_document.stream_ref
end

mets_filename = ARGV[0]

config = Datyl::Config.new(config_filename, "default", "alpo")
mets   = Mets.new(config, mets_filename)

STDERR.puts mets.valid? ? "METS file #{mets_filename} is valid" : "METS file #{mets_filename} is invalid"
STDERR.puts 'METS Errors: ',   mets.errors   if mets.errors?
STDERR.puts 'METS Warnings: ', mets.warnings if mets.warnings?

exit 0 unless mets.valid?

metsid_filenames = {}
entities_directory  = File.expand_path(File.join(File.dirname(mets_filename), '../digital_entities'))
datafiles_directory = File.expand_path(File.join(File.dirname(mets_filename), '../streams'))

Dir["#{entities_directory}/*"].each do |filepath|
  stream_record = parse_digitial_entity(filepath)
  next unless stream_record.file_id =~ /^METSID/
  metsid_filenames[stream_record.file_id] = stream_record.file_name    # e.g.,  "METSID-1" => "page001.jp2"
end

# metsid_filenames.keys.sort{ |a,b| a.sub("METSID-",'').to_i <=> b.sub('METSID-', '').to_i }.each do |metsid|
#   puts metsid + '   ' + metsid_filenames[metsid]
# end

mets.file_dictionary.each do |dictionary_entry|

  href = dictionary_entry.href
  next unless href =~ /METSID-/

  image_filename = metsid_filenames[href]

  if not image_filename
    STDERR.puts "No METSID mapping for #{dictionary_entry.inspect}"
    next
  end

  if not File.exists?  File.join(datafiles_directory, image_filename)
    STDERR.puts "Missing file #{image_filename}"
    next
  end

  dictionary_entry.href = image_filename
end

mets.file_dictionary.print
