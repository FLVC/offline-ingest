#!/usr/bin/env ruby

# For testing, remove soon:

Kernel.trap('INT')  { STDERR.puts "Interrupt"    ; exit -1 }
Kernel.trap('HUP')  { STDERR.puts "Hangup"       ; exit -2 }
Kernel.trap('PIPE') { STDERR.puts "Pipe Closed"  ; exit -3 }

$LOAD_PATH.unshift "/usr/local/islandora/offline-ingest/lib/"

  ENV['HTTP_PROXY'] = 'http://localhost:3128/'
  ENV['http_proxy'] = 'http://localhost:3128/'

require 'offin/mets'

# TODO: check for image filenames (need errors, warnings, valid? on TOC)
# TODO: compare package contents to expected list of pages in TOC object

# TESTING

Struct.new('MockConfig', :schema_directory)

config = Struct::MockConfig.new
config.schema_directory = '/usr/local/islandora/offline-ingest/lib/include/'

SaxDocumentExamineMets.debug = false


ARGV.each do |filename|

  STDERR.puts '', filename, ''

  start = Time.now

  mets = Mets.new(config, filename)

  STDERR.puts mets.valid? ? "METS is valid" : "METS is invalid"
  STDERR.puts 'METS Errors: ',   mets.errors   if mets.errors?
  STDERR.puts 'METS Warnings: ', mets.warnings if mets.warnings?

  next unless mets.valid?

  toc  = TableOfContents.new(mets.structmap)

  STDERR.puts toc.valid? ? "TOC is valid" : "TOC is invalid"
  STDERR.puts 'TOC Errors: ',   toc.errors   if toc.errors?
  STDERR.puts 'TOC Warnings: ', toc.warnings if toc.warnings?

  next unless toc.valid?

  STDERR.puts sprintf("Successfully parsed #{toc.pages.length} pages in %5.2f seconds.", Time.now - start)

  puts toc.to_json(mets.label)
  puts ''
  toc.print

end
